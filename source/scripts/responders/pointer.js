// Skin.js 0.1.4
// Â© 2013 Soheil Jadidian
// Skin.js may be freely distributed under the MIT license
// http://skinjs.org

define('responders/pointer', ['skin'], function(Skin) {

  // Pointer Responder Module
  // ========================
  // hooks for mouse, pen or touch events

  var w = window, d = document, e = d.documentElement, b = d.body, n = w.navigator, Tools = Skin.Tools, hub = {}, indices = []
    , down   = /(start|down)$/i
    , move   = /move$/i
    , up     = /(up|end)$/i
    , cancel = /cancel$/i
    , over   = /(over|enter)$/
    , out    = /(out|leave)$/;

  // supported events
  // ----------------
  // press:         tap, click, pointerdown followed by pointerup
  // doublepress:   double tap or double click, press press
  // longpress:     hold, long tap, long click, pointerdown and pointerup with delay
  // controlpress:  right click, contextmenu, pointerdown followed by pointerup with key type, altKey shiftKey or ctrlKey
  // wheel:         mousewheel, might be generated by device on two finger panning
  // pointerdown:   mousedown, touchstart
  // pointerup:     mouseup, touchend
  // pointermove:   mousemove, touchmove
  // pointercancel: touchcancel
  // pointerover:   mouseenter, mouseover without bubbling
  // pointerout:    mouseleave, mouseout without bubbling
  // dragstart:     pointerdown followed by pointermove
  // dragover:      dragstart, followed by pointerover or touchenter if supported
  // dragout:       dragstart, followed by pointerout or touchleave if supported
  // dragend:       dragstart, followed by pointerup, or pointercancel
  // drag:          dragstart, pointermove
  // drop:          dragstart, followed by pointerup on specific target
  // swipestart, swipe, swipeend
  // panstart, pan, panend
  // rotatestart, rotate, rotateend
  // pinchstart, pinch, pinchend

  // check if browser supports an event
  function isSupported(name) {
    var element = document.createElement('div'), cache = {}, flag;
    name = 'on' + name;
    if (cache[name]) return cache[name];
    flag = (name in element);
    if (!flag) {
      element.setAttribute(name, 'return;');
      flag = typeof element[name] === 'function';
    }
    element = null;
    cache[name] = flag;
    return flag;
  }

  // get a nested element's offset, according to document
  function offset(element) {
    var x = 0, y = 0, pointer = element;
    while (pointer !== null) {
      x += pointer.offsetLeft;
      y += pointer.offsetTop;
      pointer = pointer.offsetParent;
    }
    return { x: x, y: y };
  }

  // prevent default browser actions
  function prevent(event) {
    if (event.preventDefault) event.preventDefault();
    if (event.preventManipulation) event.preventManipulation();
    if (event.preventMouseEvent) event.preventMouseEvent();
  }

  // ensure coordinate is inside the element
  function sanitizeCoordinate(element, coordinate) {
    var offset = offset(element);
    return {
      x: Math.max(0, Math.min(coordinate.x - offset.x, element.offsetWidth))
    , y: Math.max(0, Math.min(coordinate.y - offset.y, element.offsetHeight))
    };
  }

  function add(element, name, context, callback) {
    var index = Tools.indexFor(indices, element) + '.'
      , type;

    switch (name) {
      case 'pointerdown':
        type = isSupported('pointerdown') ? 'pointerdown'
             : isSupported('touchstart') ? 'touchstart'
             : n.msPointerEnabled ? 'MSPointerDown'
             : 'mousedown';
        break;
      case 'pointerup':
        type = isSupported('pointerup') ? 'pointerup'
             : isSupported('touchend') ? 'touchend'
             : n.msPointerEnabled ? 'MSPointerUp'
             : 'mouseup';
        break;
      case 'pointermove':
        type = isSupported('pointermove') ? 'pointermove'
             : isSupported('touchmove') ? 'touchmove'
             : n.msPointerEnabled ? 'MSPointerMove'
             : 'mousemove';
        break;
      case 'pointercancel':
        // touch only
        type = isSupported('pointercancel') ? 'pointercancel'
             : isSupported('touchcancel') ? 'touchcancel'
             : n.msPointerEnabled ? 'MSPointerCancel'
             : null;
        break;
      case 'pointerover':
        // mouse only
        type = isSupported('mouseenter') ? 'mouseenter'
             : 'mouseover';
        break;
      case 'pointerout':
        // mouse only
        type = isSupported('mouseleave') ? 'mouseleave'
             : 'mouseout';
        break;
    }

    if (type) {
      var path = index + name;
      if (hub[path]) {
        hub[path].push(context);
      } else {
        hub[path] = [context];
        if (callback) element.addEventListener(type, callback, false);
        else element.addEventListener(type, handle, false);
      }
    }
  }

  function remove(element, name, context, callback) {
  } 

  function handle(event) {
    var element = event.currentTarget
      , index   = Tools.indexFor(indices, element) + '.'
      , name    = move.test(event.type) ? 'pointermove'
                : over.test(event.type) ? 'pointerover'
                : out.test(event.type) ? 'pointerout'
                : down.test(event.type) ? 'pointerdown'
                : up.test(event.type) ? 'pointerup'
                : 'pointercancel'
      , path    = index + name;

    if (hub[path]) {
      event.stopPropagation();
      Tools.each(hub[path], function(context) {
        context.trigger(element, name, { x: event.clientX, y: event.clientY });
      });
    }
  }


  Skin.Responders.Pointer = { add: add, remove: remove };
  return Skin;
});